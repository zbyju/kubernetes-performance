---
import moment from 'moment';
import type { Post } from '../types/post.types';

export interface Props {
	post: Post;
	href?: string;
}

const { post, href } = Astro.props;
const time = moment(post.createdAt).format("DD.MM.YYYY hh:mm:ss")
---

<astro-card data-id={post.id} data-ups={post.upvotes} data-downs={post.downvotes}>
	<div class="card">
		<div class="card-body">
			<span>Posted by: <i>{post.author}</i> at <i>{time}</i></span>
			{ href === undefined ? <p class="link-card">{post.body}</p> : <a href={href} class="link-card"><p>{post.body}</p></a>}
		</div>
		<div class="card-voting">
			<button class={`up up-${post.id}`}>˄</button>
			<span class={`votes votes-${post.id}`}>0</span>
			<button class={`down down-${post.id}`}>˅</button>
		</div>
	</div>
</astro-card>

<script>
import { downvotePost, upvotePost } from "../services/api";

class AstroCard extends HTMLElement {
	postId: number;
	upvotes: number;
	downvotes: number

	updateVotes() {
		const votesEl = document.querySelector("span.votes-" + this.postId)
		if(votesEl === null) return
		const votes = this.upvotes - this.downvotes
		votesEl.textContent = String(votes)
	}

	constructor() {
		super()
		this.postId = Number(this.dataset.id);
		this.upvotes = Number(this.dataset.ups)
		this.downvotes = Number(this.dataset.downs)
		this.updateVotes()
		const downvoteBtn = document.querySelector('button.down-' + this.postId)
		downvoteBtn?.addEventListener('click', () => {
			downvotePost(this.postId)
			this.downvotes++
			this.updateVotes()
		})
		const upvoteBtn = document.querySelector('button.up-' + this.postId)
		upvoteBtn?.addEventListener('click', () => {
			upvotePost(this.postId)
			this.upvotes++
			this.updateVotes()
		})
	}
}

customElements.define("astro-card", AstroCard)
</script>

<style>

	.card {
		list-style: none;
		padding-left: 15px;
		display: flex;
		background-color: white;
		border-radius: 0.5rem;
	}

	.card .card-body {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		padding: 20px 0;
	}

	.card .card-body {
		margin: 10px 0;
		padding: 0;
		color: #666;
		font-size: 0.8em;
	}

	.card .card-body p {
		padding: 0;
		margin: 10px 0;
		color: #000;
		font-size: 1.2em;
	}

	.card .card-voting {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	.card .card-voting span.votes{
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		margin: 0;
		padding: 0;
		width: 28px;
		height: 28px;
		border-radius: 5px 0 0 5px;
		font-size: 1.0em;
		font-weight: 400;
		border: 1px solid #6d6d6d
	}


	.card .card-voting button {
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		margin: 0;
		padding: 0;
		width: 30px;
		height: 30px;
		border-radius: 5px 0 0 5px;
		font-size: 1.0em;
		font-weight: 400;
		cursor: pointer;
		border: 1px solid #000;
		transition: 0.5s all;
	}

	.card .card-voting button.up {
		border: 1px solid rgb(75, 214, 100);
		background-color: rgba(255, 255, 255, 0);
		color: rgb(19, 69, 28);
	}
	.card .card-voting button.up:hover {
		background-color: rgb(64, 185, 86);
		color: rgb(11, 40, 17);
	}

	.card .card-voting button.down {
		border: 1px solid rgb(231, 106, 125);
		background-color: rgba(255, 255, 255, 0);
		color: rgb(87, 27, 36);
	}
	.card .card-voting button.down:hover {
		background-color: rgb(212, 97, 115);
		color: rgb(23, 7, 10);
	}

	.link-card {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		border-radius: 0.35rem;
		color: #111;
		background-color: white;
		opacity: 0.8;
		flex-grow: 1;
	}
	p {
		color: #222;
	}
	.link-card-link:is(:hover, :focus-within) {
		background-position: 0;
	}
	.link-card-link:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
</style>
